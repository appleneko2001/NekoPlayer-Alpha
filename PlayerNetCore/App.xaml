<Application x:Class="PlayerNetCore.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:PlayerNetCore"
             xmlns:converters="clr-namespace:NekoPlayer.Wpf.Converters"
             xmlns:system="clr-namespace:System;assembly=System.Runtime" xmlns:tb="http://www.hardcodet.net/taskbar" xmlns:validationrules="clr-namespace:NekoPlayer.Wpf.ValidationRules" xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" xmlns:itemscontrolviews="clr-namespace:NekoPlayer.Wpf.ItemsControlViews"
             DispatcherUnhandledException="Application_DispatcherUnhandledException"
             Startup="OnStartup"
             Exit="Application_Exit">
    

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Wpf/DynamicFontStyle.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Wpf/CustomStyles.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Globalization/LanguageNodeDictionary.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Blue.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Red.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <system:String x:Key="PreviewAlbumImageSize">PreviewAlbumImageSize</system:String>
            <!--Thanks for solution non-sizeable column: https://stackoverflow.com/questions/39013246/set-non-resizable-gridviewcolumn-->
            <Style x:Key="disabledColumn" TargetType="GridViewColumnHeader" BasedOn="{StaticResource MaterialDesignGridViewColumnHeader}">
                <Setter Property="IsEnabled" Value="False"/>
            </Style>
            <converters:ToByteSizeTextConverter x:Key="BytesToBeautySizeText"/>
            <converters:ColorToSolidColorBrushConverter x:Key="ColorBrush"/>
            <converters:BoolToPackIconConverter x:Key="Boolean2PackIconKind"/>
            <converters:LanguagePackConverter x:Key="LanguagePack"/>
            <converters:IfNullToLanguageNodeConverter x:Key="NullTargetToLangNode"/>
            <converters:InverseBooleanConverter x:Key="InverseBoolean"/>
            <converters:StringFormatMultiConverter x:Key="StringFormat"/>
            <converters:BoolToSwitchTextConverter x:Key="BoolToSwitchText"/>
            <converters:BoolToIntConverter x:Key="BoolToInt"/>
            <converters:IntToSwitchTextConverter x:Key="IntToSwitchText"/>
            <converters:StarWidthConverter x:Key="ListViewStarWidth"/>
            <converters:VisibilityBySettingsConverter x:Key="VisibilityConditionWithSettings"/>
            <converters:GetSettingsIntConverter x:Key="IntFromSettingsString"/>
            <converters:BoolToVisibilityConverter x:Key="BoolToVisibility"/>
            <validationrules:ValidationNameRule x:Key="ValidationNameRule"/>

            <itemscontrolviews:ControlTemplateSelector x:Key="ControlTemplateSelector"/>
            <DataTemplate DataType="{x:Type itemscontrolviews:SeparatorHeaderControl}" x:Key="SeparatorHeader">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="48"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>
                    <Separator Grid.ColumnSpan="2" VerticalAlignment="Top" Margin="0"/>
                    <TextBlock Grid.Column="1" Margin="0,16" Text="{Binding Header}" Foreground="{DynamicResource PrimaryHueMidBrush}"/>
                </Grid>

            </DataTemplate>
            <DataTemplate DataType="{x:Type itemscontrolviews:BooleanControl}" x:Key="Switchable">
                <Button Style="{StaticResource FlatButton}" MinHeight="64" Padding="0" Height="Auto" VerticalContentAlignment="Center" Command="{Binding OnClick}">
                    <Grid Margin="0,16" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="48"/>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="48"/>
                            <ColumnDefinition Width="48"/>
                        </Grid.ColumnDefinitions>
                        <materialDesign:PackIcon Width="24" Height="24" Kind="{Binding Icon}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                                                  Visibility="{Binding Converter={StaticResource BoolToVisibility}, Path=Icon}"/>
                        <StackPanel Grid.Column="1">
                            <TextBlock Style="{StaticResource Body2TextBlock}" Foreground="{DynamicResource MaterialDesignBody}" Text="{Binding Text}" />
                            <TextBlock Style="{StaticResource CaptionTextBlock}" VerticalAlignment="Stretch" Text="{Binding Description}" Visibility="{Binding Converter={StaticResource NullableToVisibilityConverter}, Path=Description}" TextWrapping="Wrap"/>
                        </StackPanel>
                        <ToggleButton IsHitTestVisible="False" Grid.Column="2" IsChecked="{Binding Value}" Focusable="False"/>
                    </Grid>
                </Button>
            </DataTemplate>
            <DataTemplate DataType="{x:Type itemscontrolviews:ComboBoxListControl}" x:Key="ComboBoxList">
                <Button Style="{StaticResource FlatButton}" MinHeight="64" Padding="0" Height="Auto" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Command="{Binding OnClick}">
                    <Grid  Margin="0,16">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1*"/>
                            <RowDefinition Height="1*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="48"/>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="48"/>
                        </Grid.ColumnDefinitions>
                        <materialDesign:PackIcon Width="24" Height="24" Kind="{Binding Icon}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.RowSpan="2"
                                                                 Visibility="{Binding Converter={StaticResource BoolToVisibility}, Path=Icon}"/>
                        <StackPanel Grid.Column="1" Grid.RowSpan="2" VerticalAlignment="Center">
                            <TextBlock Style="{StaticResource Body2TextBlock}" Foreground="{DynamicResource MaterialDesignBody}" Text="{Binding Text}" />
                            <TextBlock Style="{StaticResource CaptionTextBlock}" Text="{Binding Description}" Visibility="{Binding Converter={StaticResource NullableToVisibilityConverter}, Path=Description}"  TextWrapping="Wrap"/>
                        </StackPanel>
                    </Grid>
                </Button>
            </DataTemplate>
            <DataTemplate DataType="{x:Type itemscontrolviews:GroupControl}" x:Key="ControlContainer">
                <materialDesign:Card MaxWidth="800" Margin="32,4">
                    <StackPanel>
                        <TextBlock Margin="48,16" Text="{Binding Header}" Foreground="{DynamicResource PrimaryHueMidBrush}"/>
                        <ItemsControl ItemsSource="{Binding Widgets}" Focusable="False" ItemTemplateSelector="{StaticResource ControlTemplateSelector}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </StackPanel>
                </materialDesign:Card>
            </DataTemplate>
            <DataTemplate x:Key="MediaListCellRow1">
                <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                    <TextBlock Text="{Binding TrackInfo.TrackId}" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="MediaListCellRow2" >
                <StackPanel>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Subtitle1TextBlock}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Ready}" Value="False">
                                        <Setter Property="Foreground" Value="Red"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=Ready}" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock Text="{Binding TrackInfo.Album}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap"  Style="{StaticResource OverlineTextBlock}"/>
                    <TextBlock Text="{Binding Artist}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap"  Style="{StaticResource OverlineTextBlock}"/>
                </StackPanel>
            </DataTemplate>
            <ContextMenu x:Key="MenuOnTrayIcon">
                <MenuItem Header="Show window" Command="{x:Static local:App.ShowWindowCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext}"/>
                <MenuItem Header="Exit" Command="{x:Static local:App.ShutdownCommand}"/>
            </ContextMenu>
            <materialDesign:Card x:Key="ToolTipTrayBlob" Padding="16">
                <TextBlock Foreground="{DynamicResource MaterialDesignBody}" Text="{Binding Converter={StaticResource LanguagePack}, ConverterParameter={StaticResource Program_Header}}"/>
            </materialDesign:Card>
        </ResourceDictionary>
    </Application.Resources>
</Application>
